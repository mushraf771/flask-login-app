trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerHubUsername: 'your-actual-username'  # Replace with your Docker Hub username
  imageName: 'flask-login-app'
  imageTag: '0.2.0.RELEASE'
  artifactName: 'flask-login-app'
  imageTar: '$(artifactName).tar'
  dockerImage: '$(dockerHubUsername)/$(imageName):$(imageTag)'

stages:
- stage: BuildAndDeploy
  displayName: 'Build, Push, and Deploy to EC2'
  jobs:
  - job: DockerBuildDeploy
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.10'  # Changed to match Dockerfile

    - script: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - script: |
        flake8 . --max-line-length=88 --extend-ignore=E203 --exit-zero
      displayName: 'Run linting with flake8'

    - script: |
        pytest --junitxml=test-results.xml
      displayName: 'Run tests'
      continueOnError: false

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'test-results.xml'
        failTaskOnFailedTests: true
      condition: succeededOrFailed()

    - task: Docker@2
      inputs:
        containerRegistry: 'dockerHubConnection'
        repository: '$(dockerHubUsername)/$(imageName)'
        command: 'build'
        Dockerfile: 'Dockerfile'
        tags: '$(imageTag)'
      displayName: 'Build and Push Docker Image'

    - script: |
        docker save -o $(imageTar) $(dockerImage)
      displayName: 'Save Docker image as tar'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(imageTar)'
        artifact: '$(artifactName)'
        publishLocation: 'pipeline'

    - task: SSH@0
      inputs:
        sshEndpoint: 'ec2SSHConnection'
        runOptions: 'inline'
        inline: |
          docker stop $(imageName) || true
          docker rm $(imageName) || true
          rm -f /home/ubuntu/$(imageTar) || true

    - task: CopyFilesOverSSH@0
      inputs:
        sshEndpoint: 'ec2SSHConnection'
        sourceFolder: '$(Pipeline.Workspace)/$(artifactName)'
        contents: '$(imageTar)'
        targetFolder: '/home/ubuntu'
        overWrite: true

    - task: SSH@0
      inputs:
        sshEndpoint: 'ec2SSHConnection'
        runOptions: 'inline'
        inline: |
          docker load -i /home/ubuntu/$(imageTar)
          docker run -d --name $(imageName) -p 5000:5000 $(dockerImage)